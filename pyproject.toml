[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "hep-ml-templates"
version = "0.1.0"
description = "Block-based HEP ML pipeline templates: install whole pipelines or individual components."
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [{ name = "Arvind Tawker" }]
dependencies = [
  "numpy>=1.22",
  "pandas>=2.0",
  "scikit-learn>=1.2",
  "omegaconf>=2.3",
]

[project.optional-dependencies]
# Core framework (minimal dependencies)
core = ["omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0"]

# Individual components
data-csv = ["pandas>=2.0"]
data-higgs = ["pandas>=2.0", "requests>=2.25"]
data-uproot = ["uproot>=5.0", "awkward>=2.0", "pandas>=2.0"]
model-xgb = ["xgboost>=1.7"]
model-decision-tree = ["scikit-learn>=1.2"]
model-random-forest = ["scikit-learn>=1.2"]
model-svm = ["scikit-learn>=1.2"]
model-mlp = ["scikit-learn>=1.2"]
model-adaboost = ["scikit-learn>=1.2"]
model-ensemble = ["scikit-learn>=1.2", "xgboost>=1.7"]
model-torch = ["torch>=2.2"]
model-lightning = ["torch>=2.2", "lightning>=2.2"]
model-gnn = ["torch-geometric>=2.5", "torch>=2.2"]
preprocessing = ["scikit-learn>=1.2"]
evaluation = ["scikit-learn>=1.2"]

# Algorithm-specific extras
xgb = ["xgboost>=1.7", "scikit-learn>=1.2"]
decision-tree = ["scikit-learn>=1.2"]
random-forest = ["scikit-learn>=1.2"]
svm = ["scikit-learn>=1.2"]
mlp = ["scikit-learn>=1.2"]
adaboost = ["scikit-learn>=1.2"]
ensemble = ["scikit-learn>=1.2", "xgboost>=1.7"]
torch = ["torch>=2.2", "lightning>=2.2"]
gnn = ["torch-geometric>=2.5", "torch>=2.2"]
autoencoder = ["torch>=2.2", "lightning>=2.2"]
transformer = ["torch>=2.2", "lightning>=2.2"]
cnn = ["torch>=2.2", "lightning>=2.2"]

# Development
dev = [
  "pytest>=7.3",
  "pytest-cov>=4.1",
  "ruff>=0.5",
  "black>=24.1",
  "pre-commit>=3.6",
  "mypy>=1.8",
  "isort>=5.13",
  "bandit>=1.7",
  "pydocstyle>=6.3"
]

# Complete pipeline bundles
pipeline-xgb = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2", "xgboost>=1.7"
]
pipeline-decision-tree = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2"
]
pipeline-ensemble = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2", "xgboost>=1.7"
]
pipeline-torch = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2", "torch>=2.2", "lightning>=2.2"
]
pipeline-neural = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2"
]
pipeline-gnn = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2", "torch>=2.2", "torch-geometric>=2.5"
]
pipeline-autoencoder = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2", "torch>=2.2", "lightning>=2.2", "matplotlib>=3.5"
]
all = [
  "omegaconf>=2.3", "numpy>=1.22", "pandas>=2.0", "scikit-learn>=1.2",
  "xgboost>=1.7", "torch>=2.2", "lightning>=2.2", "torch-geometric>=2.5", "uproot>=5.0", "awkward>=2.0"
]

[project.scripts]
mlpipe = "mlpipe.cli.main:main"
mlpipe-manager = "mlpipe.cli.manager:main"

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "T20", # flake8-print
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "S101", # Use of assert detected (allow asserts)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S"] # Ignore docstring and security rules in tests
"src/mlpipe/__init__.py" = ["D", "F401"] # Allow unused imports in __init__.py

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start permissive, can be stricter later
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101"]  # Skip assert_used test

[tool.pydocstyle]
convention = "google"
ignore = "D100,D104,D203,D213"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/mlpipe",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mlpipe"]
